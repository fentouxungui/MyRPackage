}
dis.mat <- cal_dis(res.list)
dis.mat
pheatmap::pheatmap(dis.mat)
res.list <- list()
for (i in names(scorelist)) {
for (j in names(scorelist[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- scorelist[[i]][[j]]
}
}
cal_dis <- function(Alist){
dis.mat <- matrix(0, nrow = length(Alist), ncol = length(Alist), dimnames = list(names(Alist), names(Alist)))
for (i in names(Alist)) {
for (j in names(Alist)) {
# Euclidean Distance
dis <- sqrt(sum((Alist[[i]] - Alist[[j]])^2))
# KLD 距离
# dis <- KLD(as.matrix(cnn.res.list[[i]]),as.matrix(cnn.res.list[[j]]))$mean.sum.KLD
dis.mat[i,j] <- dis
}
}
return(dis.mat)
}
dis.mat <- cal_dis(res.list)
pheatmap::pheatmap(dis.mat)
#' @param ScoreList
#'
#' @return a heat-map plot of the distance of each combination(genes used and UMI cutoff)
#' @export
#'
#' @examples
#' data(scRNA)
#' data(bulkRNA)
#' scorelist <- scRNAseq_Score_Region(scRNA, bulkRNA)
#' scRNAseq_Score_Region_evaluate2(scorelist)
scRNAseq_Score_Region_evaluate2 <- function(ScoreList){
res.list <- list()
for (i in names(scorelist)) {
for (j in names(scorelist[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- scorelist[[i]][[j]]
}
}
cal_dis <- function(Alist){
dis.mat <- matrix(0, nrow = length(Alist), ncol = length(Alist), dimnames = list(names(Alist), names(Alist)))
for (i in names(Alist)) {
for (j in names(Alist)) {
# Euclidean Distance
dis <- sqrt(sum((Alist[[i]] - Alist[[j]])^2))
# KLD 距离
# dis <- KLD(as.matrix(cnn.res.list[[i]]),as.matrix(cnn.res.list[[j]]))$mean.sum.KLD
dis.mat[i,j] <- dis
}
}
return(dis.mat)
}
dis.mat <- cal_dis(res.list)
pheatmap::pheatmap(dis.mat)
}
scRNAseq_Score_Region_evaluate2(scorelist)
?cor
library(MyRPackage)
data("bulkRNA")
str(bulkRNA)
data("scRNA")
scRNA
SeuratObj <- scRNA
scRNAseq.averageExpr <- Seurat::AverageExpression(SeuratObj)[[1]]
rownames(scRNAseq.averageExpr)
table(is.na(rownames(scRNAseq.averageExpr)))
?Seurat::AverageExpression
scRNAseq.averageExpr
head(BulkRNAseq.expr)
BulkRNAseq.expr <- data("bulkRNA")
scRNAseq.averageExpr <- Seurat::AverageExpression(SeuratObj)[[1]]
scRNAseq.averageExpr <- scRNAseq.averageExpr[!is.na(rownames(scRNAseq.averageExpr)),]
scRNAseq.averageExpr <- scRNAseq.averageExpr[rownames(scRNAseq.averageExpr) %in% rownames(BulkRNAseq.expr),]
# log transformation for bulk RNA-seq RPKM value
BulkRNAseq.expr <- BulkRNAseq.expr[rownames(scRNAseq.averageExpr),]
BulkRNAseq.expr <- log(BulkRNAseq.expr + 1)
# 仅仅保留
rownames(scRNAseq.averageExpr)
scRNAseq.averageExpr
scRNAseq.averageExpr <- Seurat::AverageExpression(SeuratObj)[[1]]
head(scRNAseq.averageExpr)
rownames(scRNAseq.averageExpr) %in% rownames(BulkRNAseq.expr)
rownames(BulkRNAseq.expr)
BulkRNAseq.expr <- data("bulkRNA")
head(BulkRNAseq.expr)
data("bulkRNA")
bulkRNA
BulkRNAseq.expr <- bulkRNA
scRNAseq.averageExpr <- Seurat::AverageExpression(SeuratObj)[[1]]
scRNAseq.averageExpr <- scRNAseq.averageExpr[rownames(scRNAseq.averageExpr) %in% rownames(BulkRNAseq.expr),]
# log transformation for bulk RNA-seq RPKM value
BulkRNAseq.expr <- BulkRNAseq.expr[rownames(scRNAseq.averageExpr),]
BulkRNAseq.expr <- log(BulkRNAseq.expr + 1)
#' @return A Region * Cluster matrix
#' @export
#'
#' @examples
#' data(scRNA)
#' data(bulkRNA)
#' score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman")
#' pheatmap::pheatmap(score.matrix)
#' score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman", Genes.Selection = "Top")
#' pheatmap::pheatmap(score.matrix)
scRNAseq_Score_Region2 <- function(SeuratObj,
BulkRNAseq.expr,
Method = c("spearman", "pearson", "kendall"),
Genes.Selection = c("Simple","Top"),
Top.foldchange = 3.5,
Top.UMI.Cutoff = 1,
Top.numbers = 300
){
# average expression value for each cluster.
scRNAseq.averageExpr <- Seurat::AverageExpression(SeuratObj)[[1]]
scRNAseq.averageExpr <- scRNAseq.averageExpr[rownames(scRNAseq.averageExpr) %in% rownames(BulkRNAseq.expr),]
# log transformation for bulk RNA-seq RPKM value
BulkRNAseq.expr <- BulkRNAseq.expr[rownames(scRNAseq.averageExpr),]
BulkRNAseq.expr <- log(BulkRNAseq.expr + 1)
# Simple
if (Genes.Selection[1] == "Simple") {
# 仅仅保留表达值和均不为0的基因
index <- !(apply(BulkRNAseq.expr,1,sum) == 0 | apply(scRNAseq.averageExpr,1,sum) == 0)
matrix <- cor(BulkRNAseq.expr[index,], scRNAseq.averageExpr[index,],method=Method[1],use="everything")
return(matrix)
# Top
}else if (Genes.Selection[1] == "Top") {
selected.list <- list()
for (i in colnames(BulkRNAseq.expr)) {
expr_tmp <- BulkRNAseq.expr[BulkRNAseq.expr[,i] >= Top.foldchange,]  # the minimal RPKM value!
expr_tmp <- mutate(expr_tmp,fc = expr_tmp[,i]/apply(expr_tmp,1,function(x)mean(x))) # calculate fold change
results <- arrange(expr_tmp,desc(fc)) # rank the genes by fold change
selected.list[[i]] <- results # save variant
}
# annotated with summed UMI counts from scRNA-seq
selected.list <- lapply(selected.list, function(x){
x$UMIs <- apply(scRNAseq.averageExpr[rownames(x),],1,sum)
return(x)
})
selected.list <- lapply(selected.list,function(x){x[x$UMIs > Top.UMI.Cutoff,]})
selected.genes <- unique(unlist(lapply(selected.list,function(x)rownames(x)[1:Top.numbers])))
selected.genes <- selected.genes[!is.na(selected.genes)]
matrix <- cor(BulkRNAseq.expr[selected.genes,], scRNAseq.averageExpr[selected.genes,],method=Method[1],use="everything")
return(matrix)
}else{
stop("Please check the Genes.Selection parameter!")
}
}
score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman")
pheatmap::pheatmap(score.matrix)
score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman", Genes.Selection = "Top")
#' @return A Region * Cluster matrix
#' @export
#'
#' @examples
#' data(scRNA)
#' data(bulkRNA)
#' score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman")
#' pheatmap::pheatmap(score.matrix)
#' score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman", Genes.Selection = "Top")
#' pheatmap::pheatmap(score.matrix)
scRNAseq_Score_Region2 <- function(SeuratObj,
BulkRNAseq.expr,
Method = c("spearman", "pearson", "kendall"),
Genes.Selection = c("Simple","Top"),
Top.foldchange = 3.5,
Top.UMI.Cutoff = 1,
Top.numbers = 300
){
# average expression value for each cluster.
scRNAseq.averageExpr <- Seurat::AverageExpression(SeuratObj)[[1]]
scRNAseq.averageExpr <- scRNAseq.averageExpr[rownames(scRNAseq.averageExpr) %in% rownames(BulkRNAseq.expr),]
# log transformation for bulk RNA-seq RPKM value
BulkRNAseq.expr <- BulkRNAseq.expr[rownames(scRNAseq.averageExpr),]
BulkRNAseq.expr <- log(BulkRNAseq.expr + 1)
# Simple
if (Genes.Selection[1] == "Simple") {
# 仅仅保留表达值和均不为0的基因
index <- !(apply(BulkRNAseq.expr,1,sum) == 0 | apply(scRNAseq.averageExpr,1,sum) == 0)
matrix <- cor(BulkRNAseq.expr[index,], scRNAseq.averageExpr[index,],method=Method[1],use="everything")
return(matrix)
# Top
}else if (Genes.Selection[1] == "Top") {
selected.list <- list()
for (i in colnames(BulkRNAseq.expr)) {
expr_tmp <- BulkRNAseq.expr[BulkRNAseq.expr[,i] >= Top.foldchange,]  # the minimal RPKM value!
expr_tmp <- dplyr::mutate(expr_tmp,fc = expr_tmp[,i]/apply(expr_tmp,1,function(x)mean(x))) # calculate fold change
# results <- dplyr::arrange(expr_tmp,dplyr::desc(fc)) # rank the genes by fold change
results <- expr_tmp[order(expr_tmp$fc, decreasing = TRUE),]
selected.list[[i]] <- results # save variant
}
# annotated with summed UMI counts from scRNA-seq
selected.list <- lapply(selected.list, function(x){
x$UMIs <- apply(scRNAseq.averageExpr[rownames(x),],1,sum)
return(x)
})
selected.list <- lapply(selected.list,function(x){x[x$UMIs > Top.UMI.Cutoff,]})
selected.genes <- unique(unlist(lapply(selected.list,function(x)rownames(x)[1:Top.numbers])))
selected.genes <- selected.genes[!is.na(selected.genes)]
matrix <- cor(BulkRNAseq.expr[selected.genes,], scRNAseq.averageExpr[selected.genes,],method=Method[1],use="everything")
return(matrix)
}else{
stop("Please check the Genes.Selection parameter!")
}
}
score.matrix <- scRNAseq_Score_Region2(scRNA, bulkRNA, Method = "spearman", Genes.Selection = "Top")
pheatmap::pheatmap(score.matrix)
matrix()
matrix
score.matrix
#' @param minimal.RNAseq.value A numeric: remove genes with low expression value in bulk RNA-seq
#' @param scRNAseq.expression.cut  A numeric: cut off of the scaled value to define whether a gene is expressed or not.
#'
#' @return A list: cluster * Region preference for each UMI And Top N genes combination
#' @export
#'
#' @examples
#' data(scRNA)
#' data(bulkRNA)
#' score.list <- scRNAseq_Score_Region(scRNA, bulkRNA)
scRNAseq_Score_Region <- function(SeuratObj,
BulkRNAseq.expr,
# filter genes by summed UMI count from all clusters, remove genes with low expression in scRNA-seq.
UMI.gradient = c(10, 20, 30, 40, 50, 100, 200, 500, 1000, 1500, 2000),
# select top genes used
Genes.gradient = c(10, 20, 30, 40, 50, 100, 200, 300, 400, 500),
# filter genes by expression value in Bulk RNA-seq
minimal.RNAseq.value = 0.5,
# cut off of the scaled value to define if a gene is expressed or not.
scRNAseq.expression.cut = 0.5
){
n.region <- ncol(BulkRNAseq.expr) # how many regions
sorted.list <- list() # save the ranked fold change results for each region
# for each region, choose genes with RPKM value >=3.5, and calculate the fold change compared with other regions.
for (i in 1:n.region) {
expr_tmp <- BulkRNAseq.expr[BulkRNAseq.expr[,i] >= 3.5,]  # remove genes bellow the minimal expression/RPKM value!
expr_tmp <- dplyr::mutate(expr_tmp,fc = expr_tmp[,i]/apply(expr_tmp[,-i],1,function(x)mean(x))) # calculate fold change
# results <- dplyr::arrange(expr_tmp,dplyr::desc(fc)) # rank the genes by fold change
results <- expr_tmp[order(expr_tmp$fc, decreasing = TRUE),]
sorted.list[[colnames(BulkRNAseq.expr)[i]]] <- results
}
# annotated with summed UMI counts from scRNA-seq data
sorted.list <- lapply(sorted.list, function(x){
x$UMIs <- apply(SeuratObj@assays$RNA@counts[rownames(x),],1,sum)
return(x)
})
# list: cell * gene expression matrix of each cluster, using scaled data(why?)
cluster.expr.list <- split(data.frame(t(SeuratObj@assays$RNA@scale.data)), as.character(SeuratObj@active.ident))
# 计算每个UMI和Top x Genes数目组合下，每个cluster的Region打分
main_fun <- function(cluster.expr.list = cluster.expr.list, # cell * gene
sorted.list = sorted.list,
UMI.gradient = UMI.gradient,
Genes.gradient = Genes.gradient){
# for each combination of UMI and Top n genes, for each cluster, calculate the region preference.
# return a score matrix: Cluster * Region
region_cluster_mat <- function(cluster.expr.list = cluster.expr.list, gene.list = gene.list){
# build results matrix
res.sub <- matrix(0,
nrow = length(cluster.expr.list),
ncol = length(gene.list),
dimnames = list(names(cluster.expr.list),names(gene.list)))
for (x in names(cluster.expr.list)) {
for (y in names(gene.list)) {
expr.sub <- cluster.expr.list[[x]]
# remove genes not exist in scRNA-seq
genes.region <- gene.list[[y]][gene.list[[y]] %in% colnames(expr.sub)]
expr.sub <- expr.sub[,genes.region]
# for each region, calculate the enrichment score of each scRNA-seq cluster.
expr.sub <- expr.sub > scRNAseq.expression.cut # transfer to a expression binary matrix, 0:not expressed, 1:expressed.
cell.percent <- apply(expr.sub, 2, mean) # mean expression percent of each gene
res.sub[x,y] <- mean(cell.percent) # mean expression percent of all genes which is normalized by genes numbers, for different gene sets may have different gene numbers
}
}
return(res.sub)
}
# save the final results for each combination
res <- list()
for (i in as.character(UMI.gradient)) {
for (j in as.character(Genes.gradient)) {
# for each combination, choose genes with enough UMIs, and only keep the top_n genes
gene.list <- lapply(sorted.list, function(x){
x <- x[x$UMIs > i,]
return(rownames(x)[1:j])
})
# calculate the region preference of each cluster for each combination
res[[i]][[j]] <- region_cluster_mat(cluster.expr.list = cluster.expr.list, gene.list = gene.list)
}
}
return(res)
}
# run
main_fun(cluster.expr.list = cluster.expr.list, # cell * gene
sorted.list = sorted.list,
UMI.gradient = UMI.gradient,
Genes.gradient = Genes.gradient)
}
score.list <- scRNAseq_Score_Region(scRNA, bulkRNA)
score.list[[1]]
matrix
matrix
matrix
score.matrix
cor(score.list[[1]],t(score.matrix))
cor(unlist(score.list[[1]]),unlist(t(score.matrix)))
unlist(score.list[[1]])
score.list[[1]]
cor(unlist(score.list[[1]][[1]]),unlist(t(score.matrix)))
pheatmap(cor(unlist(score.list[[1]][[1]]),unlist(t(score.matrix))))
pheatmap::pheatmap(cor(unlist(score.list[[1]][[1]]),unlist(t(score.matrix))))
scRNAseq_Score_Compare() <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(scorelist)) {
for (j in names(scorelist[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- scorelist[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res[i] <- cor(unlist(res.list[[i]]),unlist(t(score.matrix)))
}
pheatmap::pheatmap(cor.res)
}
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(scorelist)) {
for (j in names(scorelist[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- scorelist[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res[i] <- cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)))
}
pheatmap::pheatmap(cor.res)
}
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(scorelist)) {
for (j in names(scorelist[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- scorelist[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res[i] <- cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1])
}
pheatmap::pheatmap(cor.res)
}
scRNAseq_Score_Compare(score.list,score.matrix)
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- scorelist[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res[i] <- cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1])
}
pheatmap::pheatmap(cor.res)
}
scRNAseq_Score_Compare(score.list,score.matrix)
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- ScoreList[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res[i] <- cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1])
}
pheatmap::pheatmap(cor.res)
}
scRNAseq_Score_Compare(score.list,score.matrix)
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- ScoreList[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res[i] <- cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1])
}
return(cor.res)
}
scRNAseq_Score_Compare(score.list,score.matrix)
warnings()
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- ScoreList[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res <- append(cor.res, cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1]))
}
names(cor.res) <- names(res.list)
return(cor.res)
}
scRNAseq_Score_Compare(score.list,score.matrix)
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- ScoreList[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
cor.res <- append(cor.res, cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1]))
}
names(cor.res) <- names(res.list)
return(sort(cor.res, decreasing = TRUE))
}
scRNAseq_Score_Compare(score.list,score.matrix)
ScoreList
ScoreList <- score.list
ScoreMatrix <- score.matrix
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- ScoreList[[i]][[j]]
}
}
names(res.list)
cor.res <- c()
names(res.list)
cor.res <- c()
for (i in names(res.list)) {
cor.res <- append(cor.res, cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1]))
}
Method = c("spearman", "pearson", "kendall")
cor.res <- c()
for (i in names(res.list)) {
cor.res <- append(cor.res, cor(unlist(res.list[[i]]),unlist(t(ScoreMatrix)), method = Method[1]))
}
cor.res
res.list[[1]]
unlist(res.list[[i]])
ScoreMatrix
colnames(ScoreMatrix)
?cor
cor(res.list[[1]],score.matrix)
res.list[[1]]
t(score.matrix)
i
tmp.df <- res.list[[i]][rownames(ScoreMatrix),]
tmp.df <- res.list[[i]][colnames(ScoreMatrix),]
tmp.df
t(ScoreMatrix)
cor(tmp.df,t(ScoreMatrix))
cor(as.vector(tmp.df),as.vector(t(ScoreMatrix)))
scRNAseq_Score_Compare <- function(ScoreList,
ScoreMatrix,
Method = c("spearman", "pearson", "kendall")){
res.list <- list()
for (i in names(ScoreList)) {
for (j in names(ScoreList[[1]])) {
res.list[[paste0("UMI-",i,"-Genes-",j)]] <- ScoreList[[i]][[j]]
}
}
cor.res <- c()
for (i in names(res.list)) {
tmp.df <- res.list[[i]][colnames(ScoreMatrix),]
cor.res <- append(cor.res, cor(as.vector(tmp.df),as.vector(t(ScoreMatrix)), method = Method[1]))
}
names(cor.res) <- names(res.list)
return(sort(cor.res, decreasing = TRUE))
}
scRNAseq_Score_Compare(score.list,score.matrix)
?cor
library(MyRPackage)
use_readme_rmd()
devtools::use_readme_rmd()
use_readme_rmd()
library(devtools)
use_readme_rmd()
data(scRNA)
data(bulkRNA)
score.list <- scRNAseq_Score_Region(scRNA, bulkRNA)
scRNAseq_Score_Region_evaluate(score.list)
scRNAseq_Score_Region_evaluate2(score.list)
scRNAseq_Score_Region_evaluate2(score.list)
scRNAseq_Score_Region_plot(score.list)
scRNAseq_Score_Region_plot(score.list, 100, 100)
scRNAseq_Score_Compare(score.list,score.matrix)
head(scRNAseq_Score_Compare(score.list,score.matrix),20)
library(MyRPackage)
